procedure assign {
1	x = 1 + 
		2 + 
		3 + 
		4 + 
		5 + 
		6 + 
		7 + 
		8 + 
		9 + 
		10 + 
		11 + 
		12 + 
		13 + 
		14 + 
		15 + 
		16 + 
		17 + 
		18 + 
		19 + 
		20;							
2	x = (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20;
3	x = 1 + 2 +  3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + (11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20);
4	x = 1 + 2 +  3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + (15 + 16 + 17 + 18 + 19 + 20);
5	x = (1 + 2 + 3 + 4 + 5) * (11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20) + 6 + 7 + 8 + 9 + 10;
6	x = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 - 9 - 10 - 11 - 12 - 13 - 14 - 15 + 16 + 17 + 18 + 19 + 20;
7	x = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 - 9 - 10 - 11 - 12 - 13 - 14 - (15 + 16 + 17 + 18 + 19 + 20);
8	x = (1 + 2) + (3 + 4) + (5 + 6) + (7 + 8 + 9) + 10 + (11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20);
9	x = (3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14) / (1 + 2) + 15 + 16 + 17 + 18 + 19 + 20;
10	x = (3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14) / 1 + 2 + 15 + 16 + 17 + 18 + 19 + 20;
11	x = 1 + 2;
12	x = (3 + 4);
13	x = 5 + 6;
14	x = 7+8+9;
15	x = (1 + 2) + (3 + 4) + (5 + 6) + (7 + 8 + 9) + 10;
16	x = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10;

17	x20 = x1 + x2;
18	x19 = (x1 + (x2 + x3));
19	x18 = x3 + x4;
20	x17 = x5 + x6;
21	x16 = ((x7 + x8) + x9);
22	x15 = ((x1 + x2) + (x3 + x4) + (x5 + x6) + (x7 + x8 + x9) + x10);
23	x14 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10;
24	x13 = x11 + x12;
25	x12 = (x15 + x16 + x17 + x18 + x19 + x20);
26	x11 = x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19;
	
27	x10 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20;
	
28	x9 = ((((((x1) + x2) + x3) + x4) + x5) + (x6) + (x7) + (x8) + (x9) + (x10)) + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20;
	
29	x8 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + (x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20);
	
30	x7 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + (x15 + x16 + x17 + x18 + x19 + x20);
	
31	x6 = x1 + x2 + (x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10) + x11 + x12 + x13 + x14 + (x15 + x16 + x17 + x18 + x19 + x20);
	
32	x5 = (x1 + x2 + x3 + x4 + x5) * (x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20) + x6 + x7 + x8 + x9 + x10;
	
33	x4 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 - x9 - x10 - x11 - x12 - x13 - x14 - x15 + x16 + x17 + x18 + x19 + x20;
	
34	x3 = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 - x9 - x10 - x11 - x12 - x13 - x14 - (x15 + x16 + x17 + x18 + x19 + x20);
	
35	x2 = (x1 + x2) + (x3 + x4) + (x5 + x6) + (x7 + x8 + x9) + x10 + (x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20);
	
36	x1 = (x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14) / (x1 + x2) + x15 + x16 + x17 + x18 + x19 + x20;
	
37	x = (x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14) / x1 + x2 + x15 + x16 + x17 + x18 + x19 + x20;

38	x = (1 * x) + (2 - x) + (x * 3) + (x / 4) + (5 % x) + (x / 6) + (x + 7) + (8 / x) + (9 % x);

39	x = x13 * x14 / (20 * x15) * x16 % x17 / x18 - x13 * x14 / (20 * x15) * x16 % x17 / x18 + 4;

40	x = (x13 * x14 / (20 * x15) * x16 % x17 / x18);
41	x = (x13 * x14 / (20 * x15) * x16 % x17 / x19);
42	x = (x13 * x14 / (19 * x15) * x16 % x17 / x18);
43	x = (x13 * x14 / (20 * x15) % x16 % x17 / x18);
44	x = (x13 * x14 / (20 * x15) * x16 % x17 / (x18 + 5));

45	y = (y + y) % (y - y * y) - y % y;
46	y = ((y + y) % (y - (y * y))) - (y % y);
47	y = (y + y) % (y - y * y) - y % y + (y + y) % (y - y * y) - y % y;
48	y = (y + y) % (y - y * y) - y % y % (y - y * y) - y % y + (y + y) % (y - y * y) - y % y;
49	y = (y + y) % (y - y * y + y + y) - y % y % (y - y + y - y * y) - y % y + (y - y + y + y) % (y - y * y) - y % y;
50	y = y + ((y + y) % (y - y * y) - y % y % (y - y * y));
51	y = (y + y + y % y + y) % (y - y * y) - y % y + (y + y) % (y - y * y) - y % y;
52	y = (y + y) % (y - y * y) - y % y;
53	y = (y + (y)) % ((y - y) * y) - y % y;
54	y = ((y + (y)) % ((y - y) * y) - y) % y - ((y + (y)) % (y) - y) % y;
55	y = ((y + y % y - (y * y))) - (y % y);
56	y = ((y + y % y - y) * y) - (y % y);
57	y = y + y % y - y * y - y % y + y + y % y - y * y - y % y;
58	y = y + y % y - y * y - y % (y + y) + y % y - y * y - y % y;
59	y = y + y % y - y * y - y % y;
60	y = (y + y) % (y - y) * (y - y % y);
61	y = ((y + y % y - y) * y) - (y % y);
62	y = (y + y % y - y) * (y - y) % y;
63	y = y + (y % y - y) * y - y % y;
64	y = y * y * y / y * (y + y * ((y % y * y) + y - y));

65	call while;
66	call if;
67	call mixed;
}

procedure while {
68	while ((1 == d + e) || (1 == f + g)) {
69		d = d % e % e % d;
70		e = e % f % (e % e);
71		f = f % g + f % e;
72		while (!(((d < e) && (e >= f)) && (f == g))) {
73			g = d % e % e % d;
		}
74		d = a + e % e * h;
75		f = a + d % (e * h);
76		e = a + f % e * (h / e);
	}
77	a = a + 1;
78	b = b + 1;
79	c = c + 1;
80	g = a + b + (a + b / c) - (b / (a * a + (d - 1)) - f % e % d * 6 + c / 3) * 200 * (d * 200 + 7 * f);
81	while (a * b * c < 200) {
82		read g;
83		while ((a * b * c > 0) && (a + b + c < 5)) {
84			a = c - 1;
85			b = a - 1;
86			c = b - 1;
87			while ((c != 0) && (a != 0) && (b != 0)) {
88				a = b * c - 200 % d - (h / 2 + h / 2);
89				b = a * c - 200 % d - (h / 2 + h / 2);
90				c = c * a - 200 % d - (h / 2) + h / 2;
91				while ((c != a) || (b == d)) {
92					e = d % e % e % d;
93					while (a < d) {
94						e = f % (f * b - c + 100 / c);
					}
				}
95				while ((b != a) || (b == a)) {
96					read c;
97					if (c == a) then {
98						print h;
					} else {
99						print a;
					}
100					read a;
101					print a;
				}
102				while ((c != a) || (c == b)) {
103					print h;
104					if (b == 0) then {
105						b = c;
					} else {
106						b = ((b + 200) % (c - (100 * a * (b * c)))) - (f % g);
					}
107					read a;
				}
			}
		}
	}
}

procedure if {
108	if (a == 1) then {
109		if (b == 2) then {
110			if (c == 3) then {
111				a = e % d % (d % e);
112				b = f % e % (e % f) - d % d;
113				c = 7 * f + f % g - 4 * 5 - e % f + 6;
			} else {
114				a = b + 1 - c * 2 % 3 + b * c - e + f;
115				b = a * c / 3 - a - 1 + a - c + e * f;
116				c = a / b + (b - b % 2) * 1 - f - e / 3;
117				if (h == 8) then {
118					f = a - 1;
119					e = b + 1;
120					f = c - 1;
121					d = a + b + c;
122					c = b + 1;
123					read x;
				} else {
124					while (h > 0) {
125						h = h - 1;
126						a = b * c;
127						b = c * a;
128						c = a * b;
					}
				}
129				a = e;
130				b = f;
131				c = g;
			}
		} else {
132			e = b;
133			f = b;
134			read e;
135			e = f + e;
		}
	} else {
136		while (a != 1) {
137			if (h == 8) then {
138				print b;
139				print h;
140				if (a == h) then {
141					h = a * 200;
				} else { 
142					h = b * 200;
				}
143				a = h;
			} else {
144				if ((h == 7) || (h == 6)) then {
145					a = 2;
				} else {
146					a = h * g / (f % e);
				}
			}
		}
147		read a;
148		read b;
149		read c;
150		if (a == 1) then {
151			d = (d + 1) - (d % e) + (e % d);
152			e = (e + 1) - (e % f) + (f % e);
153			f = (f + 1) - (f % g) + (g % f);
		} else {
154			a = g + f;
155			b = a - 1;
156			c = b - 1;
		}
	}
}

procedure mixed {
157	a = a + 1;
158	if ((a > 1) && (a < 100)) then {
159		a = a / 1;
160		while (a <= b) {
161			a = a - 1;
162			if ((b > 1) && (b < 100)) then {
163				b = b % 1;
164				while (!((b <= c) || (c >= d))) {
165					b = b - 1;
166					c = c + 1;
167					c = c - 1;
168					c = c / 1;
169					d = d / 1;
170					d = d * 1;
				}
171				b = b * 1;
			} else {
172				b = b + 1;
173				e = e + 1;
174				while (!(e <= f)) {
175					b = b / 1;
176					while (e == f) {
177						f = f - 1;
178						e = e - 1;
179						f = f + 1;
					}
180					g = e + f;
181					g = e % f;
182					e = e / 1 - f / 1;
183					while (e != f) {
184						f = f / 1 - e / 1;
					}
185					f = f % 1;
186					e = e % 1;
187					g = g + 1 - (g - 1);
188					g = g % 1;
				}
189				g = g / 1;
190				e = e * 1;
191				f = f * 1;
192				g = g * 1;
			}
		}
193		a = a % 1;
	} else {
194		a = a * 1;
195		h = 0;
196		while (h > 0) {
197			h = h + 1;
198			while (h < 200) {
199				h = h - 1;
200				while (h < 175) {
201					h = h * 1;
202					while (h < 150) {
203						h = h / 1;
204						while (h < 125) {
205							h = h % 1;
						}
206						a = a + b;
					}
207					b = b + c;
				}
208				h = a + b + c;
209				c = c + d;
210				while (h > 100) {
211					h = h + d + e + f;
				}
212				g = h;
			}
213			h = a + b + c + d + e + f + g;
214			h = a + b + c + d + e + f + g + h;
		}
215		while (h > 0) {
216			h = h + 1;
217			while (h < 200) {
218				h = h - 1;
219				while (h < 190) {
220					h = h * 1;
221					if (h < 180) then {
222						h = h / 1;
223						while (h < 170) {
224							h = h % 1;
						}
225						a = a + b;
					} else {
226						b = b + c;
227						h = a + b + c;
228						c = c + d;
229						while (h > 100) {
230							a = h + d + e + f;
						}
231						g = h;
					}
				}
			}
232			h = a + b + c + d + e + f + g;
233			h = a + b + c + d + e + f + g + h;
		}
234		print h;
	}
}
